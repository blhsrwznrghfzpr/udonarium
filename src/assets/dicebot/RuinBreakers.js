/* Generated by Opal 1.0.3 */
Opal.modules["utils/ArithmeticEvaluator"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$tokenize', '$expr', '$private', '$split', '$gsub', '$mul', '$loop', '$consume', '$+', '$-', '$unary', '$*', '$div', '$zero?', '$===', '$ceil', '$/', '$to_f', '$round', '$floor', '$-@', '$term', '$expect', '$expect_number', '$!=', '$[]', '$integer?', '$to_i', '$!', '$nil?', '$match']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'ArithmeticEvaluator');

    var $nesting = [self].concat($parent_nesting), $ArithmeticEvaluator_eval$1, $ArithmeticEvaluator_tokenize$2, $ArithmeticEvaluator_add$4, $ArithmeticEvaluator_mul$6, $ArithmeticEvaluator_div$8, $ArithmeticEvaluator_unary$9, $ArithmeticEvaluator_term$10, $ArithmeticEvaluator_consume$11, $ArithmeticEvaluator_expect$12, $ArithmeticEvaluator_expect_number$13, $ArithmeticEvaluator_integer$ques$14;

    self.$$prototype.error = self.$$prototype.round_type = self.$$prototype.tokens = self.$$prototype.idx = nil;
    
    
    Opal.def(self, '$eval', $ArithmeticEvaluator_eval$1 = function(expr, round_type) {
      var self = this, ret = nil;

      
      
      if (round_type == null) {
        round_type = "omit";
      };
      self.tokens = self.$tokenize(expr);
      self.idx = 0;
      self.error = false;
      self.round_type = round_type;
      ret = self.$expr();
      if ($truthy(self.error)) {
        return 0
      } else {
        return ret
      };
    }, $ArithmeticEvaluator_eval$1.$$arity = -2);
    self.$private();
    
    Opal.def(self, '$tokenize', $ArithmeticEvaluator_tokenize$2 = function $$tokenize(expr) {
      var $$3, self = this;

      return $send(expr, 'gsub', [/[\(\)\+\-\*\/]/], ($$3 = function(e){var self = $$3.$$s || this;

      
        
        if (e == null) {
          e = nil;
        };
        return "" + " " + (e) + " ";}, $$3.$$s = self, $$3.$$arity = 1, $$3)).$split(" ")
    }, $ArithmeticEvaluator_tokenize$2.$$arity = 1);
    
    Opal.def(self, '$add', $ArithmeticEvaluator_add$4 = function $$add() {
      var $$5, self = this, ret = nil;

      
      ret = self.$mul();
      (function(){var $brk = Opal.new_brk(); try {return $send(self, 'loop', [], ($$5 = function(){var self = $$5.$$s || this;

      if ($truthy(self.$consume("+"))) {
          return (ret = $rb_plus(ret, self.$mul()))
        } else if ($truthy(self.$consume("-"))) {
          return (ret = $rb_minus(ret, self.$mul()))
        } else {
          
          Opal.brk(nil, $brk)
        }}, $$5.$$s = self, $$5.$$brk = $brk, $$5.$$arity = 0, $$5))
      } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
      return ret;
    }, $ArithmeticEvaluator_add$4.$$arity = 0);
    Opal.alias(self, "expr", "add");
    
    Opal.def(self, '$mul', $ArithmeticEvaluator_mul$6 = function $$mul() {
      var $$7, self = this, ret = nil;

      
      ret = self.$unary();
      (function(){var $brk = Opal.new_brk(); try {return $send(self, 'loop', [], ($$7 = function(){var self = $$7.$$s || this;

      if ($truthy(self.$consume("*"))) {
          return (ret = $rb_times(ret, self.$unary()))
        } else if ($truthy(self.$consume("/"))) {
          return (ret = self.$div(ret, self.$unary()))
        } else {
          
          Opal.brk(nil, $brk)
        }}, $$7.$$s = self, $$7.$$brk = $brk, $$7.$$arity = 0, $$7))
      } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
      return ret;
    }, $ArithmeticEvaluator_mul$6.$$arity = 0);
    
    Opal.def(self, '$div', $ArithmeticEvaluator_div$8 = function $$div(left, right) {
      var self = this, $case = nil;

      
      if ($truthy(right['$zero?']())) {
        
        self.error = true;
        return 0;};
      return (function() {$case = self.round_type;
      if ("roundUp"['$===']($case)) {return $rb_divide(left.$to_f(), right).$ceil()}
      else if ("roundOff"['$===']($case)) {return $rb_divide(left.$to_f(), right).$round()}
      else {return $rb_divide(left, right).$floor()}})();
    }, $ArithmeticEvaluator_div$8.$$arity = 2);
    
    Opal.def(self, '$unary', $ArithmeticEvaluator_unary$9 = function $$unary() {
      var self = this;

      if ($truthy(self.$consume("+"))) {
        return self.$unary()
      } else if ($truthy(self.$consume("-"))) {
        return self.$unary()['$-@']()
      } else {
        return self.$term()
      }
    }, $ArithmeticEvaluator_unary$9.$$arity = 0);
    
    Opal.def(self, '$term', $ArithmeticEvaluator_term$10 = function $$term() {
      var self = this, ret = nil;

      if ($truthy(self.$consume("("))) {
        
        ret = self.$expr();
        self.$expect(")");
        return ret;
      } else {
        return self.$expect_number()
      }
    }, $ArithmeticEvaluator_term$10.$$arity = 0);
    
    Opal.def(self, '$consume', $ArithmeticEvaluator_consume$11 = function $$consume(str) {
      var self = this;

      
      if ($truthy(self.tokens['$[]'](self.idx)['$!='](str))) {
        return false};
      self.idx = $rb_plus(self.idx, 1);
      return true;
    }, $ArithmeticEvaluator_consume$11.$$arity = 1);
    
    Opal.def(self, '$expect', $ArithmeticEvaluator_expect$12 = function $$expect(str) {
      var self = this;

      
      if ($truthy(self.tokens['$[]'](self.idx)['$!='](str))) {
        self.error = true};
      return (self.idx = $rb_plus(self.idx, 1));
    }, $ArithmeticEvaluator_expect$12.$$arity = 1);
    
    Opal.def(self, '$expect_number', $ArithmeticEvaluator_expect_number$13 = function $$expect_number() {
      var self = this, ret = nil;

      
      if ($truthy(self['$integer?'](self.tokens['$[]'](self.idx)))) {
      } else {
        
        self.error = true;
        self.idx = $rb_plus(self.idx, 1);
        return 0;
      };
      ret = self.tokens['$[]'](self.idx).$to_i();
      self.idx = $rb_plus(self.idx, 1);
      return ret;
    }, $ArithmeticEvaluator_expect_number$13.$$arity = 0);
    return (Opal.def(self, '$integer?', $ArithmeticEvaluator_integer$ques$14 = function(str) {
      var self = this;

      return /^\d+$/.$match(str)['$nil?']()['$!']()
    }, $ArithmeticEvaluator_integer$ques$14.$$arity = 1), nil) && 'integer?';
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 1.0.3 */
Opal.modules["utils/table"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$freeze', '$match', '$raise', '$to_i', '$[]', '$roll', '$-']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Table');

    var $nesting = [self].concat($parent_nesting), $Table_initialize$1, $Table_roll$2;

    self.$$prototype.times = self.$$prototype.sides = self.$$prototype.name = self.$$prototype.items = nil;
    
    
    Opal.def(self, '$initialize', $Table_initialize$1 = function $$initialize(name, type, items) {
      var self = this, m = nil;

      
      self.name = name;
      self.items = items.$freeze();
      m = /(\d+)D(\d+)/i.$match(type);
      if ($truthy(m)) {
      } else {
        self.$raise($$($nesting, 'ArgumentError'), "" + "Unexpected table type: " + (type))
      };
      self.times = m['$[]'](1).$to_i();
      return (self.sides = m['$[]'](2).$to_i());
    }, $Table_initialize$1.$$arity = 3);
    return (Opal.def(self, '$roll', $Table_roll$2 = function $$roll(bcdice) {
      var $a, $b, self = this, value = nil, index = nil;

      
      $b = bcdice.$roll(self.times, self.sides), $a = Opal.to_ary($b), (value = ($a[0] == null ? nil : $a[0])), $b;
      index = $rb_minus(value, self.times);
      return "" + (self.name) + "(" + (value) + ") ＞ " + (self.items['$[]'](index));
    }, $Table_roll$2.$$arity = 1), nil) && 'roll';
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 1.0.3 */
Opal.modules["utils/range_table"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$new', '$alias_method', '$freeze', '$lambda', '$name', '$sum', '$content', '$attr_reader', '$match', '$raise', '$to_i', '$[]', '$store', '$find', '$include?', '$range', '$roll', '$map', '$split', '$to_proc', '$fetch', '$formatted=', '$-', '$private', '$coerce_to_int_range', '$sort_by', '$min', '$assert_min_sum_is_covered', '$assert_max_sum_is_covered', '$assert_no_gap_or_overlap_in_ranges', '$===', '$is_a?', '$begin', '$end', '$class', '$first', '$*', '$last', '$each_cons', '$max', '$+']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'RangeTable');

    var $nesting = [self].concat($parent_nesting), $RangeTable$1, $RangeTable$2, $RangeTable_initialize$3, $RangeTable_fetch$4, $RangeTable_roll$6, $RangeTable_store$7, $RangeTable_coerce_to_int_range$11, $RangeTable_assert_min_sum_is_covered$12, $RangeTable_assert_max_sum_is_covered$13, $RangeTable_assert_no_gap_or_overlap_in_ranges$14;

    self.$$prototype.name = self.$$prototype.items = self.$$prototype.num_of_dice = self.$$prototype.num_of_sides = self.$$prototype.formatter = nil;
    
    Opal.const_set($nesting[0], 'RollResult', $send($$($nesting, 'Struct'), 'new', ["sum", "values", "content", "formatted"], ($RangeTable$1 = function(){var self = $RangeTable$1.$$s || this;

    return self.$alias_method("to_s", "formatted")}, $RangeTable$1.$$s = self, $RangeTable$1.$$arity = 0, $RangeTable$1)));
    Opal.const_set($nesting[0], 'Item', $$($nesting, 'Struct').$new("range", "content"));
    Opal.const_set($nesting[0], 'DICE_ROLL_METHOD_RE', /^(\d+)D(\d+)$/i.$freeze());
    Opal.const_set($nesting[0], 'DEFAULT_FORMATTER', $send(self, 'lambda', [], ($RangeTable$2 = function(table, result){var self = $RangeTable$2.$$s || this;

    
      
      if (table == null) {
        table = nil;
      };
      
      if (result == null) {
        result = nil;
      };
      return "" + (table.$name()) + "(" + (result.$sum()) + ") ＞ " + (result.$content());}, $RangeTable$2.$$s = self, $RangeTable$2.$$arity = 2, $RangeTable$2)));
    self.$attr_reader("name");
    self.$attr_reader("num_of_dice");
    self.$attr_reader("num_of_sides");
    
    Opal.def(self, '$initialize', $RangeTable_initialize$3 = function $$initialize(name, dice_roll_method, items) {
      var $iter = $RangeTable_initialize$3.$$p, formatter = $iter || nil, $a, self = this, m = nil;

      if ($iter) $RangeTable_initialize$3.$$p = null;
      
      
      if ($iter) $RangeTable_initialize$3.$$p = null;;
      self.name = name.$freeze();
      self.formatter = ($truthy($a = formatter) ? $a : $$($nesting, 'DEFAULT_FORMATTER'));
      m = $$($nesting, 'DICE_ROLL_METHOD_RE').$match(dice_roll_method);
      if ($truthy(m)) {
      } else {
        self.$raise($$($nesting, 'ArgumentError'), "" + (self.name) + ": invalid dice roll method: " + (dice_roll_method))
      };
      self.num_of_dice = m['$[]'](1).$to_i();
      self.num_of_sides = m['$[]'](2).$to_i();
      return self.$store(items);
    }, $RangeTable_initialize$3.$$arity = 3);
    
    Opal.def(self, '$fetch', $RangeTable_fetch$4 = function $$fetch(value) {
      var $$5, self = this, item = nil;

      
      item = $send(self.items, 'find', [], ($$5 = function(i){var self = $$5.$$s || this;

      
        
        if (i == null) {
          i = nil;
        };
        return i.$range()['$include?'](value);}, $$5.$$s = self, $$5.$$arity = 1, $$5));
      if ($truthy(item)) {
      } else {
        self.$raise($$($nesting, 'RangeError'), "" + (self.name) + ": value is out of range: " + (value))
      };
      return item;
    }, $RangeTable_fetch$4.$$arity = 1);
    
    Opal.def(self, '$roll', $RangeTable_roll$6 = function $$roll(bcdice) {
      var $a, $b, self = this, sum = nil, values_str = nil, values = nil, result = nil, $writer = nil;

      
      $b = bcdice.$roll(self.num_of_dice, self.num_of_sides), $a = Opal.to_ary($b), (sum = ($a[0] == null ? nil : $a[0])), (values_str = ($a[1] == null ? nil : $a[1])), $b;
      values = $send(values_str.$split(","), 'map', [], "to_i".$to_proc());
      result = $$($nesting, 'RollResult').$new(sum, values, self.$fetch(sum).$content());
      
      $writer = [self.formatter['$[]'](self, result)];
      $send(result, 'formatted=', Opal.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;
      return result;
    }, $RangeTable_roll$6.$$arity = 1);
    self.$private();
    
    Opal.def(self, '$store', $RangeTable_store$7 = function $$store(items) {
      var $$8, $$9, $$10, self = this, items_with_range = nil, sorted_items = nil;

      
      items_with_range = $send(items, 'map', [], ($$8 = function(r, c){var self = $$8.$$s || this;

      
        
        if (r == null) {
          r = nil;
        };
        
        if (c == null) {
          c = nil;
        };
        return [self.$coerce_to_int_range(r), c];}, $$8.$$s = self, $$8.$$arity = 2, $$8));
      sorted_items = $send(items_with_range, 'sort_by', [], ($$9 = function(r, _){var self = $$9.$$s || this;

      
        
        if (r == null) {
          r = nil;
        };
        
        if (_ == null) {
          _ = nil;
        };
        return r.$min();}, $$9.$$s = self, $$9.$$arity = 2, $$9));
      self.$assert_min_sum_is_covered(sorted_items);
      self.$assert_max_sum_is_covered(sorted_items);
      self.$assert_no_gap_or_overlap_in_ranges(sorted_items);
      self.items = $send(sorted_items, 'map', [], ($$10 = function(range, content){var self = $$10.$$s || this;

      
        
        if (range == null) {
          range = nil;
        };
        
        if (content == null) {
          content = nil;
        };
        return $$($nesting, 'Item').$new(range, content.$freeze()).$freeze();}, $$10.$$s = self, $$10.$$arity = 2, $$10)).$freeze();
      return self;
    }, $RangeTable_store$7.$$arity = 1);
    
    Opal.def(self, '$coerce_to_int_range', $RangeTable_coerce_to_int_range$11 = function $$coerce_to_int_range(x) {
      var $a, self = this, $case = nil;

      
      $case = x;
      if ($$($nesting, 'Integer')['$===']($case)) {return $$($nesting, 'Range').$new(x, x)}
      else if ($$($nesting, 'Range')['$===']($case)) {if ($truthy(($truthy($a = x.$begin()['$is_a?']($$($nesting, 'Integer'))) ? x.$end()['$is_a?']($$($nesting, 'Integer')) : $a))) {
        return x}};
      return self.$raise($$($nesting, 'TypeError'), "" + (self.name) + ": " + (x) + " (" + (x.$class()) + ") must be an Integer or a Range with Integers ");
    }, $RangeTable_coerce_to_int_range$11.$$arity = 1);
    
    Opal.def(self, '$assert_min_sum_is_covered', $RangeTable_assert_min_sum_is_covered$12 = function $$assert_min_sum_is_covered(sorted_items) {
      var self = this, min_sum = nil, range = nil;

      
      min_sum = self.num_of_dice;
      range = sorted_items.$first()['$[]'](0);
      if ($truthy(range['$include?'](min_sum))) {
      } else {
        self.$raise($$($nesting, 'RangeError'), "" + (self.name) + ": min value (" + (min_sum) + ") is not covered: " + (range))
      };
      return self;
    }, $RangeTable_assert_min_sum_is_covered$12.$$arity = 1);
    
    Opal.def(self, '$assert_max_sum_is_covered', $RangeTable_assert_max_sum_is_covered$13 = function $$assert_max_sum_is_covered(sorted_items) {
      var self = this, max_sum = nil, range = nil;

      
      max_sum = $rb_times(self.num_of_dice, self.num_of_sides);
      range = sorted_items.$last()['$[]'](0);
      if ($truthy(range['$include?'](max_sum))) {
      } else {
        self.$raise($$($nesting, 'RangeError'), "" + (self.name) + ": max value (" + (max_sum) + ") is not covered: " + (range))
      };
      return self;
    }, $RangeTable_assert_max_sum_is_covered$13.$$arity = 1);
    return (Opal.def(self, '$assert_no_gap_or_overlap_in_ranges', $RangeTable_assert_no_gap_or_overlap_in_ranges$14 = function $$assert_no_gap_or_overlap_in_ranges(sorted_items) {
      var $$15, self = this;

      
      $send(sorted_items, 'each_cons', [2], ($$15 = function(i1, i2){var self = $$15.$$s || this, r1 = nil, r2 = nil, max1 = nil, next_of_max1 = nil;
        if (self.name == null) self.name = nil;

      
        
        if (i1 == null) {
          i1 = nil;
        };
        
        if (i2 == null) {
          i2 = nil;
        };
        r1 = i1['$[]'](0);
        r2 = i2['$[]'](0);
        max1 = r1.$max();
        next_of_max1 = $rb_plus(max1, 1);
        if ($truthy(r2['$include?'](max1))) {
          self.$raise($$($nesting, 'RangeError'), "" + (self.name) + ": Range overlap: " + (r1) + " and " + (r2))};
        if ($truthy(r2['$include?'](next_of_max1))) {
          return nil
        } else {
          return self.$raise($$($nesting, 'RangeError'), "" + (self.name) + ": Range gap: " + (r1) + " and " + (r2))
        };}, $$15.$$s = self, $$15.$$arity = 2, $$15));
      return self;
    }, $RangeTable_assert_no_gap_or_overlap_in_ranges$14.$$arity = 1), nil) && 'assert_no_gap_or_overlap_in_ranges';
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 1.0.3 */
(function(Opal) {
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $hash2 = Opal.hash2, $range = Opal.range;

  Opal.add_stubs(['$require', '$===', '$check_roll', '$roll_fp_damage', '$roll_fp_recovery', '$roll_tables', '$private', '$match', '$eval', '$new', '$[]', '$to_i', '$max', '$div', '$<', '$roll', '$>=', '$==', '$<=', '$join', '$divmod', '$+', '$ceil', '$fdiv', '$freeze', '$setPrefixes', '$keys']);
  
  self.$require("utils/ArithmeticEvaluator");
  self.$require("utils/table");
  self.$require("utils/range_table");
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'RuinBreakers');

    var $nesting = [self].concat($parent_nesting), $RuinBreakers_rollDiceCommand$1, $RuinBreakers_check_roll$2, $RuinBreakers_roll_fp_damage$3, $RuinBreakers_roll_fp_recovery$4;

    
    Opal.const_set($nesting[0], 'ID', "RuinBreakers");
    Opal.const_set($nesting[0], 'NAME', "ルーインブレイカーズ");
    Opal.const_set($nesting[0], 'SORT_KEY', "るういんふれいかあす");
    Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "■ 基本判定 (RBx@y#z)\n" + "  x：成功率、y：クリティカル値（省略可）、z：ファンブル値（省略可）\n" + "  1D100を振って、成功率に応じて成功／失敗／クリティカル／ファンブルの判定を行います。(P.60)\n" + "  クリティカル値を省略した場合は成功率の5分の1（切り捨て、最低1）\n" + "  ファンブル値を省略した場合は、成功率が99以下の場合は96、100以上の場合は99\n" + "  例） RB32, RB(45+20)/2, RB30@10, RB35+20#90, RB40-20+10@10#90\n" + "\n" + "■ FPへのダメージ (FPDx)\n" + "  x：破滅ポイント\n" + "  ルーインブレイクロール失敗時やラウンド終了時に、残っている\n" + "  破滅ポイントに応じて発生するダメージのダイスロールを行います。(P.91,92)\n" + "  例） FPD23\n" + "\n" + "■ FPの回復 (FPRx)\n" + "  x：破滅ポイント\n" + "  ルーインブレイク成功時に発生する、FPの回復量を決定するダイスロールを行います。(P.93)\n" + "  例） FPR29\n" + "\n" + "■ 各種表\n" + "  ・ポジティブ感情表 (PE)\n" + "  ・ネガティブ感情表 (NE)\n" + "  ・デウス・エクス・マキナ表 (DXM)\n" + "  ・断罪チャート (JC)\n" + "  ・破滅のイヤな感じ表 (RDF)\n" + "  ・トラブルチャート／トラブル解決チャート (TC)\n" + "  ・ドタバタアクション表 (DA)\n");
    
    Opal.def(self, '$rollDiceCommand', $RuinBreakers_rollDiceCommand$1 = function $$rollDiceCommand(command) {
      var self = this, $case = nil;

      return (function() {$case = command;
      if (/^RB/['$===']($case)) {return self.$check_roll(command)}
      else if (/^FPD/['$===']($case)) {return self.$roll_fp_damage(command)}
      else if (/^FPR/['$===']($case)) {return self.$roll_fp_recovery(command)}
      else {return self.$roll_tables(command, $$($nesting, 'TABLES'))}})()
    }, $RuinBreakers_rollDiceCommand$1.$$arity = 1);
    self.$private();
    
    Opal.def(self, '$check_roll', $RuinBreakers_check_roll$2 = function $$check_roll(command) {
      var $a, $b, $c, $d, self = this, m = nil, success_rate = nil, critical_border = nil, fumble_border = nil, total = nil, result = nil, sequence = nil;

      
      m = /^RB(\-?\d+([\+\-\*\/]\d+)*)(@(\d+))?(#(\d+))?$/.$match(command);
      if ($truthy(m)) {
      } else {
        return nil
      };
      success_rate = $$($nesting, 'ArithmeticEvaluator').$new().$eval(m['$[]'](1));
      critical_border = ($truthy($a = ($b = m['$[]'](4), ($b === nil || $b == null) ? nil : $send($b, 'to_i', []))) ? $a : [success_rate.$div(5), 1].$max());
      fumble_border = ($truthy($a = ($c = m['$[]'](6), ($c === nil || $c == null) ? nil : $send($c, 'to_i', []))) ? $a : (function() {if ($truthy($rb_lt(success_rate, 100))) {
        return 96
      } else {
        return 99
      }; return nil; })());
      $d = self.$roll(1, 100), $a = Opal.to_ary($d), (total = ($a[0] == null ? nil : $a[0])), $d;
      result = (function() {if ($truthy($rb_ge(total, fumble_border))) {
        return "ファンブル"
      } else if ($truthy(($truthy($a = total['$=='](1)) ? $a : $rb_le(total, critical_border)))) {
        return "クリティカル"
      } else if ($truthy($rb_le(total, success_rate))) {
        return "成功"
      } else {
        return "失敗"
      }; return nil; })();
      sequence = ["" + "1D100<=" + (success_rate) + "@" + (critical_border) + "#" + (fumble_border), total, result];
      return sequence.$join(" ＞ ");
    }, $RuinBreakers_check_roll$2.$$arity = 1);
    
    Opal.def(self, '$roll_fp_damage', $RuinBreakers_roll_fp_damage$3 = function $$roll_fp_damage(command) {
      var $a, $b, self = this, m = nil, ruin_point = nil, ruin_point_tens = nil, ruin_point_ones = nil, roll_result = nil, dice_str = nil, sequence = nil;

      
      m = /^FPD(\d+)$/.$match(command);
      if ($truthy(m)) {
      } else {
        return nil
      };
      ruin_point = m['$[]'](1).$to_i();
      $b = ruin_point.$divmod(10), $a = Opal.to_ary($b), (ruin_point_tens = ($a[0] == null ? nil : $a[0])), (ruin_point_ones = ($a[1] == null ? nil : $a[1])), $b;
      $b = self.$roll($rb_plus(1, ruin_point_tens), 10), $a = Opal.to_ary($b), (roll_result = ($a[0] == null ? nil : $a[0])), (dice_str = ($a[1] == null ? nil : $a[1])), $b;
      sequence = ["" + "(1+" + (ruin_point_tens) + ")D10+" + (ruin_point_ones), "" + (roll_result) + "[" + (dice_str) + "]+" + (ruin_point_ones), "" + ($rb_plus(roll_result, ruin_point_ones)) + "ダメージ"];
      return sequence.$join(" ＞ ");
    }, $RuinBreakers_roll_fp_damage$3.$$arity = 1);
    
    Opal.def(self, '$roll_fp_recovery', $RuinBreakers_roll_fp_recovery$4 = function $$roll_fp_recovery(command) {
      var $a, $b, self = this, m = nil, ruin_point = nil, dice_count = nil, roll_result = nil, dice_str = nil, sequence = nil;

      
      m = /^FPR(\d+)$/.$match(command);
      if ($truthy(m)) {
      } else {
        return nil
      };
      ruin_point = m['$[]'](1).$to_i();
      dice_count = ruin_point.$fdiv(10).$ceil();
      $b = self.$roll(dice_count, 10), $a = Opal.to_ary($b), (roll_result = ($a[0] == null ? nil : $a[0])), (dice_str = ($a[1] == null ? nil : $a[1])), $b;
      sequence = ["" + (dice_count) + "D10", "" + (roll_result) + "[" + (dice_str) + "]", "" + (roll_result) + "回復"];
      return sequence.$join(" ＞ ");
    }, $RuinBreakers_roll_fp_recovery$4.$$arity = 1);
    Opal.const_set($nesting[0], 'TABLES', $hash2(["PE", "NE", "DXM", "JC", "RDF", "TC", "DA"], {"PE": $$($nesting, 'RangeTable').$new("ポジティブ感情表", "1D100", [[$range(1, 5, false), "【希望】相手はまるで自分の過去、あるいは未来を見ているように感じる。"], [$range(6, 10, false), "【礼儀】相手に礼を尽くすべきだとあなたは考えている。"], [$range(11, 15, false), "【家族】相手とは家族のような関係となる。"], [$range(16, 20, false), "【恩人】相手から助けを受けたことがある。それは大事な思い出だ。"], [$range(21, 25, false), "【友人】相手とはなんとなくウマが合う。一緒にいると楽しい。"], [$range(26, 30, false), "【信用】相手は信用できる人物だと思う。"], [$range(31, 35, false), "【仲間】相手は同じ目的を持つ仲間だ。"], [$range(36, 40, false), "【庇護】相手のことを助けてあげたいと思っている。"], [$range(41, 45, false), "【尊敬】相手の行動、思考、思想などを尊敬している。"], [$range(46, 50, false), "【憧れ】相手の生き方、外見、能力などになんとなく憧れている。"], [$range(51, 55, false), "【好意】相手の主張、外見、生き方などに好意を抱いている。"], [$range(56, 60, false), "【忠義】相手に対して真摯に忠実でありたいと思っている。"], [$range(61, 65, false), "【目標】相手はあなたにとっての目標であり、理想の存在だ。"], [$range(66, 70, false), "【借り】相手から助けを受けた。それはいつか返すべき、借りだ。"], [$range(71, 75, false), "【貸し】相手には貸しがある。別に返してもらおうとは思っていない。"], [$range(76, 80, false), "【腐れ縁】相手は昔から何かというと縁がある。この縁は今も続いている。"], [$range(81, 85, false), "【相性】相手とはなんとなくうまくいく。相性がいいようだ。"], [$range(86, 90, false), "【有為】相手はあなたにとって益をもたらす人物だ、そう考えている。"], [$range(91, 95, false), "【秘密】相手の秘密を知っている。あるいはお互い秘密を共有している。"], [$range(96, 100, false), "【好敵手】相手のことを好敵手、ライバルだと思っている。"]]), "NE": $$($nesting, 'RangeTable').$new("ネガティブ感情表", "1D100", [[$range(1, 5, false), "【同族嫌悪】1日に自分の忌むべき過去、あるいは自分自身を見ているように感じる。"], [$range(6, 10, false), "【侮蔑】相手を蔑む気持ちがある。どうにも、気に入らない。"], [$range(11, 15, false), "【反発】相手の主張や行動などに反発を感じる。相手を受け入れることに抵抗がある。"], [$range(16, 20, false), "【わだかまり】相手には言葉にしにくいもやもやとした感情を持っている。"], [$range(21, 25, false), "【隔たり】相手とはなんとなくウマが合わない。一緒にいても面白くない。"], [$range(26, 30, false), "【疑惑】相手は信用できない人物だと思っている。"], [$range(31, 35, false), "【裏切り】相手に裏切られたという気持ちがある。"], [$range(36, 40, false), "【妨害】相手のことを気に入らず、何かあれば、邪魔したいと思っている。"], [$range(41, 45, false), "【侮辱】相手の行動、思考、思想などを嫌悪している。"], [$range(46, 50, false), "【うらやみ】相手の生き方、外見、能力などをうらやんでいる。"], [$range(51, 55, false), "【害意】相手の主張、外見、生き方などを嫌い、害を与えたいと思っている。"], [$range(56, 60, false), "【不快】相手を不快な人間だと思っている。生理的に受け付けない。"], [$range(61, 65, false), "【反面】相手を反面教師としている。ああはなるまい、と。"], [$range(66, 70, false), "【詐欺】相手に騙されているように思う。何か嘘を吐かれているように思うのだ。"], [$range(71, 75, false), "【搾取】相手に自分の何かを奪われているような怒りを感じる。"], [$range(76, 80, false), "【悪縁】相手は昔から縁がある。この縁を絶ちきりたいと思っている。"], [$range(81, 85, false), "【相性】相手とはなんとなくうまくいかない。残念だが相性が悪い。"], [$range(86, 90, false), "【害悪】相手はあなたにとって害をもたらす、そう思っている。"], [$range(91, 95, false), "【怨恨】相手に恨みを持っている。この恨みを晴らす日は来るだろうか。"], [$range(96, 100, false), "【仇敵】相手のことを倒すべき相手と思っている。"]]), "DXM": $$($nesting, 'RangeTable').$new("デウス・エクス・マキナ表", "1D10", [[$range(1, 2, false), "神降臨。エンディングフェイズに効果を発揮する。あなたの願いはかなう。願いの内容はGMと相談して決定すること。"], [$range(3, 4, false), "逃走。状況を無視してあなた以外のキャストはシーンから退場できる。"], [$range(5, 6, false), "命の雫。あなた以外のキャストのFPが3D10点だけ回復する。"], [$range(7, 8, false), "天変地異。巨大な嵐や地震、雷雨などが発生し、周囲は大混乱に陥る。トループやエキストラはシーン終了まで何も行なえない(戦闘不能として扱う)。"], [$range(9, 10, false), "不思議なことが起こった。あなたのFPが完全に回復する。"]]), "JC": $$($nesting, 'Table').$new("断罪チャート", "1D10", ["【国王／女王】国レベルの代表者が現われて、あなたの主張を支持してくれる。", "【王子／王女】王子や王女といった国で知らぬ者がないような存在が、あなたの主張を支持してくれる。", "【高位聖職者】高位の聖職者が、あなたの主張を支持してくれる。", "【有力貴族】有力貴族が、あなたの主張を支持してくれる。", "【有力市民】有力市民が、あなたの主張を支持してくれる。", "【豪商】豪商が、あなたの主張を支持してくれる。", "【現役学生たち】アカデミーの学生たちが、あなたの主張を支持してくれる。", "【OB、OGたち】アカデミーのOBやOGが、あなたの主張を支持してくれる。", "【多くの人々】名も知れぬ多くの人々が、あなたの主張を支持してくれる。", "【外国の王侯貴族】外国の代表者が現われて、あなたの主張を支持してくれる。"]), "RDF": $$($nesting, 'RangeTable').$new("破滅のイヤな感じ表", "1D100", [[$range(1, 5, false), "【水中で拘束】\n演出：水中で長い髪の毛が全身に絡みついて動きが重くなるような感覚。\nルーインブレイク成功：重い拘束から解き放たれたような快感。"], [$range(6, 10, false), "【鈍痛】\n演出：こめかみから長い釘を差し込まれているような感覚。\nルーインブレイク成功：痛みが消えてなくなる安堵感。"], [$range(11, 15, false), "【酸欠】\n演出：空気が薄くなり呼吸をしても息苦しさが消えない感覚。\nルーインブレイク成功：清浄な空気を吸った時の快感。"], [$range(16, 20, false), "【ヘッドロック】\n演出：頭を締め上げられているような感覚。\nルーインブレイク成功：痛みから逃れられた安心感。"], [$range(21, 25, false), "【悪寒】\n演出：背中が冷やりとして悪寒が全身を突き抜けるような感覚。\nルーインブレイク成功：悪寒が鎮まった平穏感。"], [$range(26, 30, false), "【熱病】\n演出：熱病で浮かされたように頭がぼうっとする感覚。\nルーインブレイク成功：落ち着きを取り戻した安息感。"], [$range(31, 35, false), "【高所恐怖】\n演出：目もくらむような断崖の際に立たされたような感覚。\nルーインブレイク成功：落下の恐怖から逃れた安堵感。"], [$range(36, 40, false), "【ガラスの破片】\n演出：砕けた散ったガラスの破片を踏み続けるような感覚。\nルーインブレイク成功：幻の痛みが消えていく安心感。"], [$range(41, 45, false), "【ジャリ感】\n演出：口の中に砂を詰め込まれたような感覚。\nルーインブレイク成功：口の中がすっきりしたような清浄感。"], [$range(46, 50, false), "【耳鳴り】\n演出：耳をふさいでも聞こえる耳鳴りが響き続けているような感覚。\nルーインブレイク成功：異音が消えた平安感。"], [$range(51, 55, false), "【孤独】\n演出：虚空にただひとり浮かんでいるような孤独な感覚。\nルーインブレイク成功：孤立から脱した安心感。"], [$range(56, 60, false), "【落下感】\n演出：高所から落ち続けているような感覚。\nルーインブレイク成功：地に足のついた安定感。"], [$range(61, 65, false), "【暗所恐怖】\n演出：明るいはずなのに周囲が真っ暗で何も見えない不安な感覚。\nルーインブレイク成功：周囲がハッキリ見える安息感。"], [$range(66, 70, false), "【擦過】\n演出：心の表面をザラザラとしたもので削られているような感覚。\nルーインブレイク成功：痛みから逃れられた安楽感。"], [$range(71, 75, false), "【幻聴】\n演出：周囲に人がいて、絶えず自分の悪口を囁きあっているような感覚。\nルーインブレイク成功：周囲への恐怖が消えた平穏感。"], [$range(76, 80, false), "【異臭】\n演出：不快な香りが漂ってくるような感覚。\nルーインブレイク成功：異臭を感じなくなった清浄感。"], [$range(81, 85, false), "【健忘感】\n演出：何かを忘れていて、それが何かは思い出せないような感覚。\nルーインブレイク成功：忘れごとを思い出せたときの開放感。"], [$range(86, 90, false), "【杞憂】\n演出：天が崩れていつ落ちてくるかわからない感覚。\nルーインブレイク成功：頭上がすっきりした痛快感。"], [$range(91, 95, false), "【背後恐怖】\n演出：背後に人が立っているような感覚。\nルーインブレイク成功：後方に憂いのない安心感。"], [$range(96, 100, false), "【夢中感】\n演出：夢の中にいるような不安な感覚。\nルーインブレイク成功：しっかりとした現実感。"]]), "TC": $$($nesting, 'Table').$new("トラブルチャート／トラブル解決チャート", "1D10", ["【暴れ馬／交通事故】\nトラブル：いきなり、暴れ馬がやってきて、キミは刎ねられた。\n解決：時間はかかったが、事故は処理された。", "【突然の崩落／地下遺跡へ移動】\nトラブル：周辺ごと地面が陥没し、地下へと導かれる。\n解決：崩落した先は謎の古代文明の遺跡であった。", "【暗殺者の襲撃】\nトラブル：凶刃がキャストを襲う。\n解決：何とか暗殺者の手を逃れ、キミは生還した。", "【拉致・誘拐】\nトラブル：突然、キミは黒覆面の男たちに馬車に押し込まれ、誘拐される。\n解決：何とかして、キミは誘拐組織の手を逃れた。", "【爆発！！】\nトラブル：爆発した！\n解決：奇跡的にキミは無傷だ、周囲には破壊されたガレキが転がっている。", "【行きずりの強盗】\nトラブル：訪れていた店やレストラン、銀行などが強盗に襲われる。\n解決：通りすがりのヒーローが強盗を倒した。あれはいったい。", "【テロリストの襲撃／撃退】\nトラブル：テロリストに襲われる。\n解決：テロリストは撃退された。", "【交通マヒ／移動変更】\nトラブル：直接、事故に行きあったわけではない事故によって起こった交通マヒによって身動きが取れない。\n解決：交通機関を変更して移動することになった。", "【軍・警察の封鎖／大捕物】\nトラブル：突如して軍や警察などの治安組織によって建物が封鎖されてしまった。\n解決：建物内にいる犯人を巡り、大捕物が始った。", "【任意】\nGMと相談してトラブルの内容を決めよう。"]), "DA": $$($nesting, 'Table').$new("ドタバタアクション表", "1D10", ["【フードファイト（野菜）】大根ソードで切りつけ、カボチャハンマーで殴り抜け", "【ホコリの雲】ドカッ、バキ、ボカッ。キュウ。", "【リビングルームストーム】飛び交うソーサー、ポットの中には煎れたばかりの紅茶（抽出温度28度）が入っているぞ。", "【廊下でランナウェイ】廊下を走っては行けません。", "【図書館バトル】敏腕司書が、図書館の静寂を乱す者を残らず静かにさせていく。", "【パーティーファイト】優雅に踊り、紳士淑女の助けを借りて悪漢を退治しよう。", "【フードファイト（肉と骨）】ヒトに眠る野性を解き放て。羊の骨が最古の武器として再発見される。", "【イスと机】イスは盾であり、武器であり悪漢をけん制し、拘束する。", "【洗濯物ファイト】シーツで敵の動きを止めて、石鹸で転ばせよう。", "【任意】GMと相談して、イメージをふくらませよう。"])}).$freeze());
    return self.$setPrefixes($rb_plus(["RB.+", "FP[DR].+"], $$($nesting, 'TABLES').$keys()));
  })($nesting[0], $$($nesting, 'DiceBot'), $nesting);
})(Opal);

/* Generated by Opal 1.0.3 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$exit']);
  return $$($nesting, 'Kernel').$exit()
})(Opal);

//# sourceMappingURL=data:application/json;base64,
